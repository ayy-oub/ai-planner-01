version: "3.8"

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: builder
    container_name: ai-planner-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "5000:5000"
      - "9229:9229" # Debug port
    volumes:
      - ../src:/app/src:ro
      - ../package.json:/app/package.json:ro
      - ../tsconfig.json:/app/tsconfig.json:ro
      - node_modules:/app/node_modules
    depends_on:
      - redis
      - prometheus
    networks:
      - ai-planner-network
    command: ["npm", "run", "dev"]

  redis:
    image: redis:7-alpine
    container_name: ai-planner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ai-planner-network

  prometheus:
    image: prom/prometheus:latest
    container_name: ai-planner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - ai-planner-network

  grafana:
    image: grafana/grafana:latest
    container_name: ai-planner-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ai-planner-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-planner-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ai-planner-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  node_modules:

networks:
  ai-planner-network:
    driver: bridge
